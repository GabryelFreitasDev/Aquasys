// <auto-generated />
using System;
using Aquasys.WebApi.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Aquasys.WebApi.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20251015033440_Updates")]
    partial class Updates
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Aquasys.Core.Entities.Hold", b =>
                {
                    b.Property<long>("IDHold")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("idhold");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("IDHold"));

                    b.Property<string>("Agent")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("agent");

                    b.Property<string>("BasementNumber")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("basementnumber");

                    b.Property<decimal>("Capacity")
                        .HasColumnType("numeric(18,5)")
                        .HasColumnName("capacity");

                    b.Property<string>("Cargo")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("cargo");

                    b.Property<Guid>("GlobalId")
                        .HasColumnType("uuid");

                    b.Property<long>("IDVessel")
                        .HasColumnType("bigint")
                        .HasColumnName("idvessel");

                    b.Property<bool>("IsSynced")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("LoadPlan")
                        .HasColumnType("numeric(18,5)")
                        .HasColumnName("loadplan");

                    b.Property<decimal>("ProductWeight")
                        .HasColumnType("numeric(18,5)")
                        .HasColumnName("productweight");

                    b.Property<DateTime>("RegistrationDateTime")
                        .HasColumnType("date")
                        .HasColumnName("datacadastro");

                    b.HasKey("IDHold");

                    b.HasIndex("GlobalId")
                        .IsUnique();

                    b.HasIndex("IDVessel");

                    b.ToTable("hold");
                });

            modelBuilder.Entity("Aquasys.Core.Entities.HoldInspection", b =>
                {
                    b.Property<long>("IDHoldInspection")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("idholdinspection");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("IDHoldInspection"));

                    b.Property<int>("CargoResidue")
                        .HasColumnType("integer")
                        .HasColumnName("cargoresidue");

                    b.Property<int>("Clean")
                        .HasColumnType("integer")
                        .HasColumnName("clean");

                    b.Property<string>("CleaningMethod")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("cleaningmethod");

                    b.Property<int>("Dry")
                        .HasColumnType("integer")
                        .HasColumnName("dry");

                    b.Property<int>("Empty")
                        .HasColumnType("integer")
                        .HasColumnName("empty");

                    b.Property<Guid>("GlobalId")
                        .HasColumnType("uuid");

                    b.Property<long>("IDHold")
                        .HasColumnType("bigint")
                        .HasColumnName("idhold");

                    b.Property<int>("Insects")
                        .HasColumnType("integer")
                        .HasColumnName("insects");

                    b.Property<DateTime>("InspectionDateTime")
                        .HasColumnType("date")
                        .HasColumnName("inspectiondatetime");

                    b.Property<bool>("IsSynced")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LeadInspector")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("leadinspector");

                    b.Property<int>("OdorFree")
                        .HasColumnType("integer")
                        .HasColumnName("odorfree");

                    b.Property<DateTime>("RegistrationDateTime")
                        .HasColumnType("date")
                        .HasColumnName("registrationdatetime");

                    b.HasKey("IDHoldInspection");

                    b.HasIndex("GlobalId")
                        .IsUnique();

                    b.HasIndex("IDHold");

                    b.ToTable("holdinspection");
                });

            modelBuilder.Entity("Aquasys.Core.Entities.HoldInspectionImage", b =>
                {
                    b.Property<long>("IDHoldInspectionImage")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("idholdinspectionimage");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("IDHoldInspectionImage"));

                    b.Property<string>("Description")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("description");

                    b.Property<Guid>("GlobalId")
                        .HasColumnType("uuid");

                    b.Property<long>("IDHoldInspection")
                        .HasColumnType("bigint")
                        .HasColumnName("idholdinspection");

                    b.Property<byte[]>("Image")
                        .IsRequired()
                        .HasColumnType("bytea")
                        .HasColumnName("image");

                    b.Property<bool>("IsSynced")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Observation")
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)")
                        .HasColumnName("observation");

                    b.Property<DateTime>("RegistrationDateTime")
                        .HasColumnType("date")
                        .HasColumnName("datacadastro");

                    b.HasKey("IDHoldInspectionImage");

                    b.HasIndex("GlobalId")
                        .IsUnique();

                    b.HasIndex("IDHoldInspection");

                    b.ToTable("holdinspectionimage");
                });

            modelBuilder.Entity("Aquasys.Core.Entities.User", b =>
                {
                    b.Property<long>("IDUser")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("iduser");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("IDUser"));

                    b.Property<string>("Email")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("email");

                    b.Property<Guid>("GlobalId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsSynced")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("password");

                    b.Property<bool>("RememberMe")
                        .HasColumnType("boolean")
                        .HasColumnName("rememberme");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("username");

                    b.HasKey("IDUser");

                    b.HasIndex("GlobalId")
                        .IsUnique();

                    b.ToTable("user");
                });

            modelBuilder.Entity("Aquasys.Core.Entities.Vessel", b =>
                {
                    b.Property<long>("IDVessel")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("idvessel");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("IDVessel"));

                    b.Property<DateTime?>("DateOfBuilding")
                        .HasColumnType("date")
                        .HasColumnName("dateofbuilding");

                    b.Property<string>("DockingLocation")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("dockinglocation");

                    b.Property<string>("Flag")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("flag");

                    b.Property<string>("FourthLastCargo")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("fourthlastcargo");

                    b.Property<Guid>("GlobalId")
                        .HasColumnType("uuid");

                    b.Property<long>("IDUserRegistration")
                        .HasColumnType("bigint")
                        .HasColumnName("iduserregistration");

                    b.Property<string>("IMO")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("imo");

                    b.Property<bool>("IsSynced")
                        .HasColumnType("boolean");

                    b.Property<string>("LastCargo")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("lastcargo");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("OS")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("os");

                    b.Property<string>("Owner")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("owner");

                    b.Property<string>("PortRegistry")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("portregistry");

                    b.Property<DateTime>("RegistrationDateTime")
                        .HasColumnType("date")
                        .HasColumnName("datacadastro");

                    b.Property<string>("SecondLastCargo")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("secondlastcargo");

                    b.Property<string>("ShippingAgent")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("shippingagent");

                    b.Property<string>("ThirdLastCargo")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("thirdlastcargo");

                    b.Property<string>("VesselName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("vesselname");

                    b.Property<string>("VesselOperator")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("vesseloperator");

                    b.HasKey("IDVessel");

                    b.HasIndex("GlobalId")
                        .IsUnique();

                    b.HasIndex("IDUserRegistration");

                    b.ToTable("vessel");
                });

            modelBuilder.Entity("Aquasys.Core.Entities.VesselImage", b =>
                {
                    b.Property<long>("IDVesselImage")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("idvesselimage");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("IDVesselImage"));

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("description");

                    b.Property<Guid>("GlobalId")
                        .HasColumnType("uuid");

                    b.Property<long>("IDVessel")
                        .HasColumnType("bigint")
                        .HasColumnName("idvessel");

                    b.Property<byte[]>("Image")
                        .IsRequired()
                        .HasColumnType("bytea")
                        .HasColumnName("image");

                    b.Property<bool>("IsSynced")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("name");

                    b.Property<DateTime>("RegistrationDateTime")
                        .HasColumnType("date")
                        .HasColumnName("datacadastro");

                    b.HasKey("IDVesselImage");

                    b.HasIndex("GlobalId")
                        .IsUnique();

                    b.HasIndex("IDVessel");

                    b.ToTable("vesselimage");
                });

            modelBuilder.Entity("Aquasys.Core.Entities.Hold", b =>
                {
                    b.HasOne("Aquasys.Core.Entities.Vessel", "VesselEntity")
                        .WithMany()
                        .HasForeignKey("IDVessel")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("VesselEntity");
                });

            modelBuilder.Entity("Aquasys.Core.Entities.HoldInspection", b =>
                {
                    b.HasOne("Aquasys.Core.Entities.Hold", "HoldEntity")
                        .WithMany()
                        .HasForeignKey("IDHold")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HoldEntity");
                });

            modelBuilder.Entity("Aquasys.Core.Entities.HoldInspectionImage", b =>
                {
                    b.HasOne("Aquasys.Core.Entities.HoldInspection", "HoldInspectionEntity")
                        .WithMany()
                        .HasForeignKey("IDHoldInspection")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HoldInspectionEntity");
                });

            modelBuilder.Entity("Aquasys.Core.Entities.Vessel", b =>
                {
                    b.HasOne("Aquasys.Core.Entities.User", "UserRegistrationEntity")
                        .WithMany()
                        .HasForeignKey("IDUserRegistration")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserRegistrationEntity");
                });

            modelBuilder.Entity("Aquasys.Core.Entities.VesselImage", b =>
                {
                    b.HasOne("Aquasys.Core.Entities.Vessel", "VesselEntity")
                        .WithMany()
                        .HasForeignKey("IDVessel")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("VesselEntity");
                });
#pragma warning restore 612, 618
        }
    }
}
